import { Puzzle, PythonTopic } from "@/types/game";

export const PYTHON_TOPICS: PythonTopic[] = [
  {
    id: "basic-variables",
    name: "Basic Variables",
    description: "Learn about Python variables and their usage",
    icon: "Variable",
  },
  {
    id: "typecasting",
    name: "Typecasting",
    description: "Convert between different data types in Python",
    icon: "Shuffle",
  },
  {
    id: "data-types",
    name: "Data Types",
    description: "Understand different data types in Python",
    icon: "Package",
  },
  {
    id: "list-methods",
    name: "List Methods",
    description: "Operations you can perform on Python lists",
    icon: "List",
  },
  {
    id: "string-methods",
    name: "String Methods",
    description: "Operations you can perform on Python strings",
    icon: "Text",
  },
  {
    id: "tuple-methods",
    name: "Tuple Methods",
    description: "Operations you can perform on Python tuples",
    icon: "Brackets",
  },
  {
    id: "dictionary-methods",
    name: "Dictionary Methods",
    description: "Operations you can perform on Python dictionaries",
    icon: "KeyRound",
  },
  {
    id: "set-methods",
    name: "Set Methods",
    description: "Operations you can perform on Python sets",
    icon: "CircleDot",
  },
  {
    id: "frozenset-methods",
    name: "Frozenset Methods",
    description: "Operations you can perform on Python frozensets",
    icon: "Snowflake",
  },
];

export const PUZZLES: Record<string, Puzzle[]> = {
  "basic-variables": [
    {
      id: "bv-1",
      question: "What is the value of x after this code runs?",
      code: "x = 5\nx = x + 3",
      options: ["5", "3", "8", "Error"],
      correctOption: 2,
      explanation: "The variable x is first assigned 5, then 3 is added to it, resulting in 8.",
    },
    {
      id: "bv-2",
      question: "Which of these is a valid variable name in Python?",
      options: ["1st_name", "first-name", "first_name", "@name"],
      correctOption: 2,
      explanation: "Variable names can contain letters, numbers, and underscores, but must start with a letter or underscore.",
    },
    {
      id: "bv-3",
      question: "What will this code print?",
      code: "message = 'Hello'\nprint(message + ' World')",
      options: ["Hello", "World", "Hello World", "HelloWorld"],
      correctOption: 2,
      explanation: "The + operator concatenates strings with a space between 'Hello' and 'World'.",
    },
    {
      id: "bv-4",
      question: "What is the output of this code?",
      code: "x = 10\ny = 3\nprint(x % y)",
      options: ["1", "3.33", "0", "3"],
      correctOption: 0,
      explanation: "The % operator gives the remainder of division. 10 divided by 3 is 3 with remainder 1.",
    },
    {
      id: "bv-5",
      question: "What happens when you run this code?",
      code: "age = 25\nprint('I am ' + age + ' years old')",
      options: ["Prints correctly", "TypeError", "SyntaxError", "ValueError"],
      correctOption: 1,
      explanation: "You can't concatenate a string with a number directly. You need to convert the number to a string first using str().",
    },
    {
      id: "bv-6",
      question: "What will be the value of result?",
      code: "x = 5\ny = 2\nresult = x * y",
      options: ["7", "10", "3", "52"],
      correctOption: 1,
      explanation: "The * operator multiplies numbers. 5 * 2 equals 10.",
    },
    {
      id: "bv-7",
      question: "What is the output of this code?",
      code: "name = 'Python'\nprint(name[0])",
      options: ["Python", "n", "P", "Error"],
      correctOption: 2,
      explanation: "String indexing starts at 0, so name[0] gives the first character 'P'.",
    },
    {
      id: "bv-8",
      question: "What will this code print?",
      code: "x = True\ny = False\nprint(x and y)",
      options: ["True", "False", "Error", "None"],
      correctOption: 1,
      explanation: "The and operator returns True only if both operands are True. Here, since y is False, the result is False.",
    },
    {
      id: "bv-9",
      question: "What is the output of this code?",
      code: "x = 5\ny = '2'\nprint(x + int(y))",
      options: ["52", "7", "Error", "25"],
      correctOption: 1,
      explanation: "int(y) converts the string '2' to integer 2, then adds to x (5) resulting in 7.",
    },
    {
      id: "bv-10",
      question: "What will be the value of z?",
      code: "x = 3\ny = 4\nz = x ** y",
      options: ["12", "81", "64", "7"],
      correctOption: 1,
      explanation: "** is the exponentiation operator, so 3**4 means 3 to the power of 4 which is 81.",
    },
    {
      id: "bv-11",
      question: "What does this code print?",
      code: "a = 10\nb = a\na = 20\nprint(b)",
      options: ["10", "20", "30", "Error"],
      correctOption: 0,
      explanation: "Assignment creates a new reference. Changing a doesn't affect b which still references the original value.",
    },
    {
      id: "bv-12",
      question: "What is the result of this operation?",
      code: "print(15 // 4)",
      options: ["3", "3.75", "4", "Error"],
      correctOption: 0,
      explanation: "// is floor division which returns the largest integer less than or equal to the result.",
    },
    {
      id: "bv-13",
      question: "What will this code output?",
      code: "x = 'Hello'\nprint(x * 3)",
      options: ["HelloHelloHello", "Hello3", "Error", "Hello Hello Hello"],
      correctOption: 0,
      explanation: "Multiplying a string by an integer repeats the string that many times.",
    },
    {
      id: "bv-14",
      question: "What is the value of result?",
      code: "x = 7\ny = 3\nresult = x == y",
      options: ["True", "False", "1", "0"],
      correctOption: 1,
      explanation: "== is the equality operator. Since 7 doesn't equal 3, it returns False.",
    },
    {
      id: "bv-15",
      question: "What does this code print?",
      code: "x = 5\nx += 2\nprint(x)",
      options: ["5", "7", "52", "Error"],
      correctOption: 1,
      explanation: "+= is the addition assignment operator, equivalent to x = x + 2.",
    },
    {
      id: "bv-16",
      question: "What is the output?",
      code: "a, b = 4, 5\nprint(a, b)",
      options: ["4", "5", "4 5", "(4, 5)"],
      correctOption: 2,
      explanation: "Multiple assignment works in Python, and print() displays values separated by spaces.",
    },
    {
      id: "bv-17",
      question: "What will be the value of x?",
      code: "x = 10\nx -= 3\nx *= 2",
      options: ["14", "7", "17", "5"],
      correctOption: 0,
      explanation: "First x becomes 7 (10-3), then 14 (7*2).",
    },
    {
      id: "bv-18",
      question: "What does this code output?",
      code: "print(not True or False)",
      options: ["True", "False", "Error", "None"],
      correctOption: 1,
      explanation: "Operator precedence: not True evaluates to False, then False or False is False.",
    },
    {
      id: "bv-19",
      question: "What is the result?",
      code: "x = 'Python'\nprint(x[-1])",
      options: ["P", "n", "o", "Error"],
      correctOption: 1,
      explanation: "Negative indices count from the end, so -1 refers to the last character 'n'.",
    },
    {
      id: "bv-20",
      question: "What will this print?",
      code: "x = 5\ny = '7'\nprint(str(x) + y)",
      options: ["12", "57", "75", "Error"],
      correctOption: 1,
      explanation: "str(x) converts 5 to '5', then concatenates with '7' to make '57'.",
    }
  ],
  "typecasting": [
    {
      id: "tc-1",
      question: "What does this code print?",
      code: "x = '123'\nprint(int(x) + 2)",
      options: ["123", "125", "'1232'", "Error"],
      correctOption: 1,
      explanation: "int('123') converts the string '123' to the number 123, then adds 2, resulting in 125.",
    },
    {
      id: "tc-2",
      question: "What is the output of this code?",
      code: "print(str(3.14))",
      options: ["3", "3.14", "'3.14'", "Error"],
      correctOption: 2,
      explanation: "str() converts the float 3.14 to the string '3.14'.",
    },
    {
      id: "tc-3",
      question: "What will this print?",
      code: "print(bool(''))",
      options: ["True", "False", "''", "Error"],
      correctOption: 1,
      explanation: "An empty string converts to False when using bool().",
    },
    {
      id: "tc-4",
      question: "What is the result of this code?",
      code: "print(float('12.34') + 1)",
      options: ["12.34", "13.34", "Error", "'12.341'"],
      correctOption: 1,
      explanation: "float('12.34') converts the string to the number 12.34, then adds 1, resulting in 13.34.",
    },
    {
      id: "tc-5",
      question: "What does this code output?",
      code: "print(list('ABC'))",
      options: ["['ABC']", "['A', 'B', 'C']", "Error", "ABC"],
      correctOption: 1,
      explanation: "list() converts a string to a list of individual characters.",
    },
    {
      id: "tc-6",
      question: "What is printed by this code?",
      code: "x = 42\nprint(type(str(x)))",
      options: ["int", "42", "<class 'str'>", "<class 'int'>"],
      correctOption: 2,
      explanation: "str(x) converts the integer 42 to a string, and type() shows it's of class 'str'.",
    },
    {
      id: "tc-7",
      question: "What will this code print?",
      code: "print(int(True))",
      options: ["True", "1", "0", "Error"],
      correctOption: 1,
      explanation: "Converting True to an integer results in 1, while False would be 0.",
    },
    {
      id: "tc-8",
      question: "What is the output of this code?",
      code: "print(bool(0.0))",
      options: ["True", "False", "0", "Error"],
      correctOption: 1,
      explanation: "The number 0.0 is considered falsy in Python, so bool(0.0) returns False.",
    },
    {
      id: "tc-9",
      question: "What does this code output?",
      code: "print(float(10))",
      options: ["10", "10.0", "'10.0'", "Error"],
      correctOption: 1,
      explanation: "float() converts an integer to a floating-point number, adding a decimal point.",
    },
    {
      id: "tc-10",
      question: "What will be the result?",
      code: "print(int('101', 2))",
      options: ["101", "5", "101.0", "Error"],
      correctOption: 1,
      explanation: "The second argument 2 specifies binary base, so '101' in binary is 5 in decimal.",
    },
    {
      id: "tc-11",
      question: "What does this code print?",
      code: "print(str([1, 2, 3]))",
      options: ["[1, 2, 3]", "'1, 2, 3'", "'[1, 2, 3]'", "Error"],
      correctOption: 2,
      explanation: "str() on a list returns the string representation including the brackets.",
    },
    {
      id: "tc-12",
      question: "What is the output?",
      code: "print(bool('False'))",
      options: ["True", "False", "'False'", "Error"],
      correctOption: 0,
      explanation: "Any non-empty string is True in Python, even if it contains 'False'.",
    },
    {
      id: "tc-13",
      question: "What will this code output?",
      code: "print(complex(3, 4))",
      options: ["7", "(3+4j)", "3+4", "Error"],
      correctOption: 1,
      explanation: "complex() creates a complex number with real and imaginary parts.",
    },
    {
      id: "tc-14",
      question: "What is the result?",
      code: "print(tuple('hello'))",
      options: ["('hello')", "('h', 'e', 'l', 'l', 'o')", "[hello]", "Error"],
      correctOption: 1,
      explanation: "tuple() converts an iterable into a tuple of its elements.",
    },
    {
      id: "tc-15",
      question: "What does this code print?",
      code: "print(int(3.9))",
      options: ["3", "4", "3.9", "Error"],
      correctOption: 0,
      explanation: "int() truncates decimal numbers towards zero.",
    },
    {
      id: "tc-16",
      question: "What will be the value?",
      code: "x = 5.7\nprint(int(x) + float(int(x)))",
      options: ["10.7", "10.0", "5.7", "Error"],
      correctOption: 1,
      explanation: "int(x) is 5, float(5) is 5.0, and 5 + 5.0 equals 10.0.",
    },
    {
      id: "tc-17",
      question: "What is the output?",
      code: "print(bool([]) == bool(''))",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "Both empty list and empty string are falsy in Python.",
    },
    {
      id: "tc-18",
      question: "What does this code print?",
      code: "print(set([1, 2, 2, 3]))",
      options: ["[1, 2, 3]", "{1, 2, 3}", "(1, 2, 3)", "Error"],
      correctOption: 1,
      explanation: "set() removes duplicates and creates an unordered collection.",
    },
    {
      id: "tc-19",
      question: "What will this output?",
      code: "print(chr(65) + str(ord('A')))",
      options: ["AA", "A65", "6565", "Error"],
      correctOption: 1,
      explanation: "chr(65) is 'A' and ord('A') is 65, which is converted to string.",
    },
    {
      id: "tc-20",
      question: "What is the result?",
      code: "print(frozenset({'a': 1, 'b': 2}.keys()))",
      options: ["frozenset({'a', 'b'})", "{'a', 'b'}", "('a', 'b')", "Error"],
      correctOption: 0,
      explanation: "keys() returns view, frozenset() creates immutable set from it."
    }
  ],
  "data-types": [
    {
      id: "dt-1",
      question: "Which of these is a mutable data type in Python?",
      options: ["int", "str", "list", "tuple"],
      correctOption: 2,
      explanation: "Lists are mutable (can be changed after creation), while int, str, and tuple are immutable.",
    },
    {
      id: "dt-2",
      question: "What is the type of this value: 3.14?",
      options: ["int", "float", "decimal", "number"],
      correctOption: 1,
      explanation: "Numbers with decimal points are of type float in Python.",
    },
    {
      id: "dt-3",
      question: "What does this code output?",
      code: "print(type(1 + 2j))",
      options: ["int", "float", "complex", "number"],
      correctOption: 2,
      explanation: "Numbers with 'j' or 'J' represent imaginary numbers and are of type complex.",
    },
    {
      id: "dt-4",
      question: "Which of these is NOT a built-in data type in Python?",
      options: ["array", "dict", "set", "frozenset"],
      correctOption: 0,
      explanation: "While array exists in the array module, it's not a built-in type like dict, set, and frozenset.",
    },
    {
      id: "dt-5",
      question: "What is the output of this code?",
      code: "print(isinstance(True, int))",
      options: ["True", "False", "Error", "None"],
      correctOption: 0,
      explanation: "In Python, bool is a subclass of int, so isinstance(True, int) returns True.",
    },
    {
      id: "dt-6",
      question: "What does this code print?",
      code: "print(type(range(5)))",
      options: ["list", "range", "iterator", "generator"],
      correctOption: 1,
      explanation: "range() returns a range object, which is its own type in Python 3.",
    },
    {
      id: "dt-7",
      question: "Which data type would be best for storing a sequence of unchangeable items?",
      options: ["list", "tuple", "set", "dict"],
      correctOption: 1,
      explanation: "Tuples are immutable sequences, perfect for storing fixed collections of items.",
    },
    {
      id: "dt-8",
      question: "What is the output of this code?",
      code: "print(type(None))",
      options: ["None", "NoneType", "null", "undefined"],
      correctOption: 1,
      explanation: "None is of type NoneType in Python.",
    },
    {
      id: "dt-9",
      question: "What does this code output?",
      code: "print(type({1, 2, 3}))",
      options: ["<class 'list'>", "<class 'tuple'>", "<class 'set'>", "<class 'dict'>"],
      correctOption: 2,
      explanation: "Curly braces with comma-separated values create a set (unless they contain key-value pairs).",
    },
    {
      id: "dt-10",
      question: "Which data type preserves insertion order in Python 3.7+?",
      options: ["set", "dict", "frozenset", "All of the above"],
      correctOption: 1,
      explanation: "As of Python 3.7, dictionaries preserve insertion order by default.",
    },
    {
      id: "dt-11",
      question: "What is the output of this code?",
      code: "print(type(10_000))",
      options: ["<class 'str'>", "<class 'float'>", "<class 'int'>", "SyntaxError"],
      correctOption: 2,
      explanation: "Underscores in numeric literals are ignored (introduced in Python 3.6 for readability).",
    },
    {
      id: "dt-12",
      question: "Which data type would be most efficient for checking membership?",
      options: ["list", "tuple", "set", "str"],
      correctOption: 2,
      explanation: "Sets use hash tables for O(1) membership testing, while sequences are O(n).",
    },
    {
      id: "dt-13",
      question: "What does this code print?",
      code: "print(type(print))",
      options: ["<class 'method'>", "<class 'function'>", "<class 'builtin'>", "<class 'NoneType'>"],
      correctOption: 1,
      explanation: "print is a built-in function in Python.",
    },
    {
      id: "dt-14",
      question: "Which of these is a valid bytes literal?",
      options: ["b'hello'", "'hello'", "bytes('hello')", "Both 1 and 3"],
      correctOption: 3,
      explanation: "Both b-prefixed strings and bytes() constructor create bytes objects.",
    },
    {
      id: "dt-15",
      question: "What is the output?",
      code: "print(type(...))",
      options: ["<class 'ellipsis'>", "<class 'None'>", "<class 'object'>", "SyntaxError"],
      correctOption: 0,
      explanation: "The Ellipsis object (written as ...) has its own type in Python.",
    },
    {
      id: "dt-16",
      question: "Which data type would be best for counting occurrences of items?",
      options: ["list", "tuple", "collections.Counter", "set"],
      correctOption: 2,
      explanation: "Counter is specifically designed for counting hashable objects.",
    },
    {
      id: "dt-17",
      question: "What does this code print?",
      code: "print(type(lambda: None))",
      options: ["<class 'function'>", "<class 'lambda'>", "<class 'NoneType'>", "<class 'method'>"],
      correctOption: 0,
      explanation: "Lambda functions create regular function objects.",
    },
    {
      id: "dt-18",
      question: "Which data type allows duplicate elements?",
      options: ["set", "frozenset", "dict keys", "list"],
      correctOption: 3,
      explanation: "Only sequences (like lists) allow duplicates - sets and dict keys enforce uniqueness.",
    },
    {
      id: "dt-19",
      question: "What is the output?",
      code: "print(type((x for x in range(3))))",
      options: ["<class 'list'>", "<class 'generator'>", "<class 'iterator'>", "<class 'range'>"],
      correctOption: 1,
      explanation: "Generator expressions create generator objects.",
    },
    {
      id: "dt-20",
      question: "Which data type would be most memory efficient for large numeric arrays?",
      options: ["list", "tuple", "array.array", "set"],
      correctOption: 2,
      explanation: "The array module provides compact storage for basic C-style data types.",
    }
  ],
  "list-methods": [
    {
      id: "lm-1",
      question: "What does this code output?",
      code: "nums = [1, 2, 3]\nnums.append(4)\nprint(nums)",
      options: ["[1, 2, 3]", "[1, 2, 3, 4]", "[4, 1, 2, 3]", "Error"],
      correctOption: 1,
      explanation: "append() adds an item to the end of the list.",
    },
    {
      id: "lm-2",
      question: "What is the result of this code?",
      code: "letters = ['a', 'b', 'c']\nprint(letters.pop(1))",
      options: ["'a'", "'b'", "'c'", "['a', 'c']"],
      correctOption: 1,
      explanation: "pop(1) removes and returns the item at index 1, which is 'b'.",
    },
    {
      id: "lm-3",
      question: "What does this code print?",
      code: "items = [1, 2, 3]\nitems.insert(1, 4)\nprint(items)",
      options: ["[1, 4, 2, 3]", "[4, 1, 2, 3]", "[1, 2, 4, 3]", "[1, 2, 3, 4]"],
      correctOption: 0,
      explanation: "insert(1, 4) adds 4 at index 1, shifting other elements right.",
    },
    {
      id: "lm-4",
      question: "What is the output of this code?",
      code: "nums = [5, 2, 8, 1]\nnums.sort()\nprint(nums)",
      options: ["[1, 2, 5, 8]", "[5, 2, 8, 1]", "[8, 5, 2, 1]", "None"],
      correctOption: 0,
      explanation: "sort() arranges the list items in ascending order.",
    },
    {
      id: "lm-5",
      question: "What does this code print?",
      code: "a = [1, 2, 3]\nb = a.copy()\nb[0] = 4\nprint(a)",
      options: ["[1, 2, 3]", "[4, 2, 3]", "[4, 1, 2, 3]", "Error"],
      correctOption: 0,
      explanation: "copy() creates a new list, so modifying b doesn't affect a.",
    },
    {
      id: "lm-6",
      question: "What is the result of this code?",
      code: "lst = [1, 2, 3, 4, 5]\nprint(lst[1:4])",
      options: ["[1, 2, 3]", "[2, 3, 4]", "[1, 2, 3, 4]", "[2, 3, 4, 5]"],
      correctOption: 1,
      explanation: "Slicing [1:4] includes elements from index 1 up to but not including 4.",
    },
    {
      id: "lm-7",
      question: "What does this code output?",
      code: "nums = [1, 2, 3]\nnums.extend([4, 5])\nprint(nums)",
      options: ["[1, 2, 3]", "[4, 5]", "[1, 2, 3, 4, 5]", "Error"],
      correctOption: 2,
      explanation: "extend() adds all elements from the iterable to the list.",
    },
    {
      id: "lm-8",
      question: "What is the output of this code?",
      code: "lst = [1, 2, 3, 2]\nprint(lst.index(2))",
      options: ["0", "1", "2", "3"],
      correctOption: 1,
      explanation: "index() returns the first occurrence of the value, which is at position 1.",
    },
    {
      id: "lm-9",
      question: "What does this code output?",
      code: "nums = [1, 2, 3]\nnums.reverse()\nprint(nums)",
      options: ["[1, 2, 3]", "[3, 2, 1]", "[3, 1, 2]", "None"],
      correctOption: 1,
      explanation: "reverse() reverses the list in place and returns None.",
    },
    {
      id: "lm-10",
      question: "What is the result of this code?",
      code: "lst = [1, 2, 3]\nlst.clear()\nprint(lst)",
      options: ["[1, 2, 3]", "[]", "None", "Error"],
      correctOption: 1,
      explanation: "clear() removes all items from the list.",
    },
    {
      id: "lm-11",
      question: "What does this code print?",
      code: "a = [1, 2, 3]\nb = [4, 5]\nprint(a + b)",
      options: ["[1, 2, 3, 4, 5]", "[5, 7]", "[[1, 2, 3], [4, 5]]", "Error"],
      correctOption: 0,
      explanation: "The + operator concatenates lists.",
    },
    {
      id: "lm-12",
      question: "What is the output of this code?",
      code: "lst = [1, 2, 3]\nlst *= 2\nprint(lst)",
      options: ["[1, 2, 3, 1, 2, 3]", "[2, 4, 6]", "[[1, 2, 3], [1, 2, 3]]", "Error"],
      correctOption: 0,
      explanation: "The *= operator repeats the list elements.",
    },
    {
      id: "lm-13",
      question: "What does this code print?",
      code: "lst = ['a', 'b', 'c']\nlst[1:3] = ['x', 'y', 'z']\nprint(lst)",
      options: ["['a', 'x', 'y', 'z']", "['a', 'b', 'c', 'x', 'y', 'z']", "['a', 'x', 'y']", "Error"],
      correctOption: 0,
      explanation: "Slice assignment replaces the specified range with new elements.",
    },
    {
      id: "lm-14",
      question: "What is the result of this code?",
      code: "lst = [1, 2, 3]\nlst.insert(-1, 4)\nprint(lst)",
      options: ["[1, 2, 4, 3]", "[1, 4, 2, 3]", "[4, 1, 2, 3]", "[1, 2, 3, 4]"],
      correctOption: 0,
      explanation: "Negative indices count from the end, so -1 refers to the last position.",
    },
    {
      id: "lm-15",
      question: "What does this code output?",
      code: "lst = [1, 2, 3, 4, 5]\nprint(lst[::2])",
      options: ["[1, 3, 5]", "[2, 4]", "[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]"],
      correctOption: 0,
      explanation: "The step value of 2 selects every second element.",
    },
    {
      id: "lm-16",
      question: "What is the output of this code?",
      code: "lst = [1, 2, 3]\nlst.append([4, 5])\nprint(lst)",
      options: ["[1, 2, 3, 4, 5]", "[1, 2, 3, [4, 5]]", "[[1, 2, 3], [4, 5]]", "Error"],
      correctOption: 1,
      explanation: "append() adds its argument as a single element to the list.",
    },
    {
      id: "lm-17",
      question: "What does this code print?",
      code: "lst = [5, 3, 1, 4, 2]\nlst.sort(reverse=True)\nprint(lst)",
      options: ["[1, 2, 3, 4, 5]", "[5, 4, 3, 2, 1]", "[2, 4, 1, 3, 5]", "Error"],
      correctOption: 1,
      explanation: "reverse=True sorts the list in descending order.",
    },
    {
      id: "lm-18",
      question: "What is the result of this code?",
      code: "lst = ['apple', 'banana', 'cherry']\nprint(lst.pop())",
      options: ["'apple'", "'banana'", "'cherry'", "['apple', 'banana']"],
      correctOption: 2,
      explanation: "pop() without arguments removes and returns the last item.",
    },
    {
      id: "lm-19",
      question: "What does this code output?",
      code: "lst = [1, 2, 3]\nlst[1:1] = [4, 5]\nprint(lst)",
      options: ["[1, 4, 5, 2, 3]", "[1, 2, 3, 4, 5]", "[4, 5, 1, 2, 3]", "Error"],
      correctOption: 0,
      explanation: "Inserting at slice [1:1] inserts elements without replacing any.",
    },
    {
      id: "lm-20",
      question: "What is the output of this code?",
      code: "lst = [1, 2, 3, 4, 5]\ndel lst[1:4]\nprint(lst)",
      options: ["[1, 5]", "[2, 3, 4]", "[1, 4, 5]", "[1, 2, 5]"],
      correctOption: 0,
      explanation: "del with slice removes the specified range of elements.",
    }
  ],
  "string-methods": [
    {
      id: "sm-1",
      question: "What does this code print?",
      code: "text = 'hello'\nprint(text.upper())",
      options: ["hello", "HELLO", "Hello", "hELLO"],
      correctOption: 1,
      explanation: "upper() converts all characters in the string to uppercase.",
    },
    {
      id: "sm-2",
      question: "What is the output of this code?",
      code: "s = 'Python'\nprint(s.lower())",
      options: ["Python", "PYTHON", "python", "pYTHON"],
      correctOption: 2,
      explanation: "lower() converts all characters in the string to lowercase.",
    },
    {
      id: "sm-3",
      question: "What does this code print?",
      code: "msg = ' hello '\nprint(msg.strip())",
      options: [" hello ", "hello", "'hello'", "Error"],
      correctOption: 1,
      explanation: "strip() removes leading and trailing whitespace.",
    },
    {
      id: "sm-4",
      question: "What is the result of this code?",
      code: "text = 'apple,banana,cherry'\nprint(text.split(','))",
      options: ["['apple', 'banana', 'cherry']", "['apple,banana,cherry']", "'apple' 'banana' 'cherry'", "Error"],
      correctOption: 0,
      explanation: "split(',') splits the string at each comma and returns a list.",
    },
    {
      id: "sm-5",
      question: "What does this code output?",
      code: "s = 'python'\nprint(s.replace('p', 'P'))",
      options: ["python", "Python", "PYTHON", "pYTHON"],
      correctOption: 1,
      explanation: "replace() replaces all occurrences of the first argument with the second.",
    },
    {
      id: "sm-6",
      question: "What is the output of this code?",
      code: "text = 'Hello World'\nprint(text.find('World'))",
      options: ["True", "False", "5", "6"],
      correctOption: 3,
      explanation: "find() returns the index where the substring starts (6 in this case, since 'W' is at index 6).",
    },
    {
      id: "sm-7",
      question: "What does this code print?",
      code: "s = '123'\nprint(s.isdigit())",
      options: ["True", "False", "123", "Error"],
      correctOption: 0,
      explanation: "isdigit() returns True if all characters in the string are digits.",
    },
    {
      id: "sm-8",
      question: "What is the result of this code?",
      code: "text = 'hello world'\nprint(text.title())",
      options: ["Hello world", "Hello World", "HELLO WORLD", "hello world"],
      correctOption: 1,
      explanation: "title() capitalizes the first character of each word in the string.",
    },
    {
      id: "sm-9",
      question: "What does this code print?",
      code: "text = 'PYTHON'\nprint(text.isupper())",
      options: ["True", "False", "PYTHON", "Error"],
      correctOption: 0,
      explanation: "isupper() returns True if all characters in the string are uppercase.",
    },
    {
      id: "sm-10",
      question: "What is the output of this code?",
      code: "s = 'python'\nprint(s.islower())",
      options: ["True", "False", "python", "Error"],
      correctOption: 0,
      explanation: "islower() returns True if all characters in the string are lowercase.",
    },
    {
      id: "sm-11",
      question: "What does this code print?",
      code: "msg = 'Hello World'\nprint(msg.startswith('Hello'))",
      options: ["True", "False", "0", "Error"],
      correctOption: 0,
      explanation: "startswith() returns True if the string starts with the specified substring.",
    },
    {
      id: "sm-12",
      question: "What is the result of this code?",
      code: "text = 'Hello World'\nprint(msg.endswith('World'))",
      options: ["True", "False", "5", "Error"],
      correctOption: 0,
      explanation: "endswith() returns True if the string ends with the specified substring.",
    },
    {
      id: "sm-13",
      question: "What does this code output?",
      code: "s = 'python programming'\nprint(s.count('p'))",
      options: ["1", "2", "3", "0"],
      correctOption: 1,
      explanation: "count() returns the number of times the substring appears in the string.",
    },
    {
      id: "sm-14",
      question: "What is the output of this code?",
      code: "text = 'hello'\nprint(text.capitalize())",
      options: ["hello", "HELLO", "Hello", "hELLO"],
      correctOption: 2,
      explanation: "capitalize() converts the first character to uppercase and the rest to lowercase.",
    },
    {
      id: "sm-15",
      question: "What does this code print?",
      code: "s = '42'\nprint(s.isnumeric())",
      options: ["True", "False", "42", "Error"],
      correctOption: 0,
      explanation: "isnumeric() returns True if all characters in the string are numeric.",
    },
    {
      id: "sm-16",
      question: "What is the result of this code?",
      code: "text = 'hello'\nprint(text.center(10, '*'))",
      options: ["**hello**", "hello****", "****hello", "**hello***"],
      correctOption: 0,
      explanation: "center() returns a centered string of specified width, padded with the specified character.",
    },
    {
      id: "sm-17",
      question: "What does this code output?",
      code: "s = 'PYthon'\nprint(s.swapcase())",
      options: ["PYTHON", "python", "pyTHON", "Error"],
      correctOption: 2,
      explanation: "swapcase() swaps the case of all characters in the string.",
    },
    {
      id: "sm-18",
      question: "What is the output of this code?",
      code: "text = 'hello world'\nprint(text.split())",
      options: ["['hello', 'world']", "['hello world']", "'hello' 'world'", "Error"],
      correctOption: 0,
      explanation: "split() with no arguments splits the string at whitespace by default.",
    },
    {
      id: "sm-19",
      question: "What does this code print?",
      code: "s = 'abc123'\nprint(s.isalnum())",
      options: ["True", "False", "abc123", "Error"],
      correctOption: 0,
      explanation: "isalnum() returns True if all characters are alphanumeric (letters or numbers).",
    },
    {
      id: "sm-20",
      question: "What is the result of this code?",
      code: "text = 'hello'\nprint(text.ljust(10, '-'))",
      options: ["-----hello", "hello-----", "--hello--", "hello"],
      correctOption: 1,
      explanation: "ljust() returns a left-justified string of specified width, padded with the specified character.",
    },
    {
      id: "sm-21",
      question: "What does this code output?",
      code: "s = '   hello   '\nprint(s.lstrip())",
      options: ["hello   ", "   hello", "hello", "   hello   "],
      correctOption: 0,
      explanation: "lstrip() removes leading whitespace from the string.",
    },
    {
      id: "sm-22",
      question: "What is the output of this code?",
      code: "text = 'hello'\nprint(text.index('e'))",
      options: ["0", "1", "2", "-1"],
      correctOption: 1,
      explanation: "index() returns the position of the first occurrence of the substring (e is at index 1).",
    },
    {
      id: "sm-23",
      question: "What does this code print?",
      code: "s = 'hello'\nprint('+'.join(s))",
      options: ["h+e+l+l+o", "hello", "h e l l o", "Error"],
      correctOption: 0,
      explanation: "join() concatenates each character with the specified separator.",
    },
    {
      id: "sm-24",
      question: "What is the result of this code?",
      code: "text = 'Hello\\nWorld'\nprint(text.splitlines())",
      options: ["['Hello', 'World']", "['Hello\\nWorld']", "Hello World", "Error"],
      correctOption: 0,
      explanation: "splitlines() splits the string at line breaks and returns a list.",
    },
    {
      id: "sm-25",
      question: "What does this code output?",
      code: "s = 'hello'\nprint(s.zfill(10))",
      options: ["00000hello", "hello00000", "hello", "0000hello0"],
      correctOption: 0,
      explanation: "zfill() pads the string with zeros on the left until it reaches the specified length.",
    },
    {
      id: "sm-26",
      question: "What is the output of this code?",
      code: "text = 'hello'\nprint(text.replace('l', 'x', 1))",
      options: ["hexlo", "hexxo", "hello", "hxxlo"],
      correctOption: 0,
      explanation: "The third argument limits the number of replacements (only the first 'l' is replaced).",
    },
    {
      id: "sm-27",
      question: "What does this code print?",
      code: "s = 'Hello World'\nprint(s.partition(' '))",
      options: ["['Hello', 'World']", "('Hello', ' ', 'World')", "Hello World", "Error"],
      correctOption: 1,
      explanation: "partition() splits the string at the first occurrence and returns a tuple of 3 elements.",
    },
    {
      id: "sm-28",
      question: "What is the result of this code?",
      code: "text = 'hello'\nprint(text.rjust(10, '*'))",
      options: ["*****hello", "hello*****", "**hello***", "hello"],
      correctOption: 0,
      explanation: "rjust() returns a right-justified string of specified width, padded with the specified character.",
    }
  ],
  "tuple-methods": [
    {
      id: "tm-1",
      question: "What does this code output?",
      code: "t = (1, 2, 3)\nprint(len(t))",
      options: ["1", "2", "3", "Error"],
      correctOption: 2,
      explanation: "len() returns the number of elements in the tuple.",
    },
    {
      id: "tm-2",
      question: "What is the result of this code?",
      code: "t = ('a', 'b', 'c', 'a')\nprint(t.count('a'))",
      options: ["0", "1", "2", "4"],
      correctOption: 2,
      explanation: "count() returns the number of times the value appears in the tuple.",
    },
    {
      id: "tm-3",
      question: "What does this code print?",
      code: "t = (1, 2, 3, 4)\nprint(t.index(3))",
      options: ["0", "1", "2", "3"],
      correctOption: 2,
      explanation: "index() returns the position of the first occurrence of the value.",
    },
    {
      id: "tm-4",
      question: "What happens when you run this code?",
      code: "t = (1, 2, 3)\nt[0] = 4",
      options: ["t becomes (4, 2, 3)", "Nothing changes", "TypeError", "ValueError"],
      correctOption: 2,
      explanation: "Tuples are immutable, so you can't change their elements after creation.",
    },
    {
      id: "tm-5",
      question: "What is the output of this code?",
      code: "t1 = (1, 2)\nt2 = (3, 4)\nprint(t1 + t2)",
      options: ["(1, 2, 3, 4)", "(4, 6)", "(1, 2)(3, 4)", "Error"],
      correctOption: 0,
      explanation: "The + operator concatenates tuples.",
    },
    {
      id: "tm-6",
      question: "What does this code print?",
      code: "t = (1,)\nprint(type(t))",
      options: ["<class 'int'>", "<class 'tuple'>", "<class 'list'>", "<class 'set'>"],
      correctOption: 1,
      explanation: "The comma makes it a tuple, even with just one element.",
    },
    {
      id: "tm-7",
      question: "What is the result of this code?",
      code: "t = tuple('abc')\nprint(t)",
      options: ["'abc'", "('a', 'b', 'c')", "['a', 'b', 'c']", "Error"],
      correctOption: 1,
      explanation: "tuple() converts an iterable into a tuple of its elements.",
    },
    {
      id: "tm-8",
      question: "What does this code output?",
      code: "t = (1, 2, [3, 4])\nt[2][0] = 5\nprint(t)",
      options: ["(1, 2, [5, 4])", "(1, 2, [3, 4])", "Error", "(5, 2, [3, 4])"],
      correctOption: 0,
      explanation: "While tuples are immutable, their mutable elements (like lists) can be changed.",
    },
    {
      id: "tm-9",
      question: "What does this code output?",
      code: "t = (1, 2, 3, 4, 5)\nprint(t[1:4])",
      options: ["(1, 2, 3)", "(2, 3, 4)", "(2, 3, 4, 5)", "(1, 2, 3, 4)"],
      correctOption: 1,
      explanation: "Slicing works on tuples, returning a new tuple with elements from index 1 to 3 (4 is exclusive).",
    },
    {
      id: "tm-10",
      question: "What is the result of this code?",
      code: "t = (1, 2, 3)\nprint(t * 2)",
      options: ["(1, 2, 3, 1, 2, 3)", "(2, 4, 6)", "6", "Error"],
      correctOption: 0,
      explanation: "The * operator repeats the tuple elements.",
    },
    {
      id: "tm-11",
      question: "What does this code print?",
      code: "t = (10, 20, 30)\nprint(max(t))",
      options: ["10", "20", "30", "Error"],
      correctOption: 2,
      explanation: "max() returns the largest element in the tuple.",
    },
    {
      id: "tm-12",
      question: "What is the output of this code?",
      code: "t = (5, 1, 7, 3)\nprint(sorted(t))",
      options: ["(1, 3, 5, 7)", "[1, 3, 5, 7]", "(5, 1, 7, 3)", "Error"],
      correctOption: 1,
      explanation: "sorted() always returns a list, not a tuple.",
    },
    {
      id: "tm-13",
      question: "What does this code output?",
      code: "t = (1, 2, 3)\na, b, c = t\nprint(b)",
      options: ["1", "2", "3", "Error"],
      correctOption: 1,
      explanation: "Tuple unpacking assigns each value to the corresponding variable.",
    },
    {
      id: "tm-14",
      question: "What is the result of this code?",
      code: "t = (1,)\nx, = t\nprint(x)",
      options: ["1", "(1,)", "Error", "None"],
      correctOption: 0,
      explanation: "The comma in 'x,' indicates tuple unpacking of a single-element tuple.",
    },
    {
      id: "tm-15",
      question: "What does this code print?",
      code: "t = (1, 2, 3)\nprint(2 in t)",
      options: ["True", "False", "2", "Error"],
      correctOption: 0,
      explanation: "The 'in' operator checks for membership in the tuple.",
    },
    {
      id: "tm-16",
      question: "What is the output of this code?",
      code: "t = (('a', 1), ('b', 2))\nprint(dict(t))",
      options: ["{'a': 1, 'b': 2}", "[('a', 1), ('b', 2)]", "Error", "('a', 1, 'b', 2)"],
      correctOption: 0,
      explanation: "A tuple of 2-element tuples can be converted to a dictionary.",
    },
    {
      id: "tm-17",
      question: "What does this code output?",
      code: "t = (1, [2, 3])\nt[1] = [4, 5]",
      options: ["(1, [4, 5])", "(1, [2, 3])", "Error", "(1, [2, 3, 4, 5])"],
      correctOption: 2,
      explanation: "Cannot replace the list element directly - tuples are immutable.",
    },
    {
      id: "tm-18",
      question: "What is the result of this code?",
      code: "t = (1, 2, 3)\nprint(t + (4,))",
      options: ["(1, 2, 3, 4)", "(1, 2, 3)(4)", "(5, 6, 7)", "Error"],
      correctOption: 0,
      explanation: "Tuples can be concatenated with the + operator.",
    },
    {
      id: "tm-19",
      question: "What does this code print?",
      code: "t = (1, 2, 3, 2, 1)\nprint(t.index(2, 2))",
      options: ["1", "2", "3", "Error"],
      correctOption: 2,
      explanation: "index() with two arguments starts searching from position 2.",
    },
    {
      id: "tm-20",
      question: "What is the output of this code?",
      code: "t = (True, False, True)\nprint(all(t))",
      options: ["True", "False", "Error", "None"],
      correctOption: 1,
      explanation: "all() returns False because not all elements are truthy.",
    },
    {
      id: "tm-21",
      question: "What does this code output?",
      code: "t = (0, False, '')\nprint(any(t))",
      options: ["True", "False", "Error", "None"],
      correctOption: 1,
      explanation: "any() returns False because all elements are falsy.",
    },
    {
      id: "tm-22",
      question: "What is the result of this code?",
      code: "t = (1, 2, 3)\nprint(t[-1])",
      options: ["1", "2", "3", "Error"],
      correctOption: 2,
      explanation: "Negative indices count from the end (-1 is the last element).",
    },
    {
      id: "tm-23",
      question: "What does this code print?",
      code: "t = (1, 2, 3, 4, 5)\nprint(t[::2])",
      options: ["(1, 3, 5)", "(2, 4)", "(1, 2, 3, 4, 5)", "Error"],
      correctOption: 0,
      explanation: "The step value of 2 selects every other element.",
    },
    {
      id: "tm-24",
      question: "What is the output of this code?",
      code: "t = (1, 2)\na, b, c = t",
      options: ["a=1, b=2, c=None", "ValueError", "TypeError", "a=1, b=2, c=undefined"],
      correctOption: 1,
      explanation: "Too many values to unpack (expected 3, got 2).",
    },
    {
      id: "tm-25",
      question: "What does this code output?",
      code: "t = (x**2 for x in range(3))\nprint(tuple(t))",
      options: ["[0, 1, 4]", "(0, 1, 4)", "Error", "(0, 1, 2)"],
      correctOption: 1,
      explanation: "The generator expression produces a tuple of squares.",
    },
    {
      id: "tm-26",
      question: "What is the result of this code?",
      code: "t = (1, 2)\nprint(t == (1, 2))",
      options: ["True", "False", "Error", "None"],
      correctOption: 0,
      explanation: "Tuples with the same elements in the same order are equal.",
    },
    {
      id: "tm-27",
      question: "What does this code print?",
      code: "t = (1, 2, 3)\nprint(min(t))",
      options: ["1", "2", "3", "Error"],
      correctOption: 0,
      explanation: "min() returns the smallest element in the tuple.",
    },
    {
      id: "tm-28",
      question: "What is the output of this code?",
      code: "t = ()\nprint(bool(t))",
      options: ["True", "False", "Error", "None"],
      correctOption: 1,
      explanation: "An empty tuple evaluates to False in a boolean context.",
    }
  ],
  "dictionary-methods": [
    {
      id: "dm-1",
      question: "What does this code output?",
      code: "d = {'a': 1, 'b': 2}\nprint(d.get('a'))",
      options: ["1", "2", "None", "Error"],
      correctOption: 0,
      explanation: "get() returns the value for the specified key if it exists.",
    },
    {
      id: "dm-2",
      question: "What is the result of this code?",
      code: "d = {'x': 10, 'y': 20}\nprint(d.keys())",
      options: ["['x', 'y']", "dict_keys(['x', 'y'])", "[10, 20]", "{'x': 10, 'y': 20}"],
      correctOption: 1,
      explanation: "keys() returns a view object containing the dictionary's keys.",
    },
    {
      id: "dm-3",
      question: "What does this code print?",
      code: "d = {'a': 1, 'b': 2}\nd.update({'c': 3})\nprint(d)",
      options: ["{'a': 1, 'b': 2}", "{'c': 3}", "{'a': 1, 'b': 2, 'c': 3}", "Error"],
      correctOption: 2,
      explanation: "update() adds the key-value pairs from another dictionary.",
    },
    {
      id: "dm-4",
      question: "What is the output of this code?",
      code: "d = {'a': 1, 'b': 2}\nprint(d.pop('a'))",
      options: ["1", "2", "{'b': 2}", "Error"],
      correctOption: 0,
      explanation: "pop() removes the specified key and returns its value.",
    },
    {
      id: "dm-5",
      question: "What does this code print?",
      code: "d = {}\nd.setdefault('color', 'red')\nprint(d)",
      options: ["{}", "{'color': 'red'}", "red", "Error"],
      correctOption: 1,
      explanation: "setdefault() inserts the key with the default value if it doesn't exist.",
    },
    {
      id: "dm-6",
      question: "What is the result of this code?",
      code: "d = {'a': 1, 'b': 2}\nprint('a' in d)",
      options: ["True", "False", "1", "Error"],
      correctOption: 0,
      explanation: "The 'in' operator checks if a key exists in the dictionary.",
    },
    {
      id: "dm-7",
      question: "What does this code output?",
      code: "d = {'x': 10, 'y': 20}\nprint(list(d.items()))",
      options: ["['x', 'y']", "[('x', 10), ('y', 20)]", "[10, 20]", "Error"],
      correctOption: 1,
      explanation: "items() returns a view object of key-value pairs, which we convert to a list of tuples.",
    },
    {
      id: "dm-8",
      question: "What is the output of this code?",
      code: "d = {'a': 1, 'b': 2}\nprint(d.values())",
      options: ["[1, 2]", "dict_values([1, 2])", "{1, 2}", "Error"],
      correctOption: 1,
      explanation: "values() returns a view object containing the dictionary's values.",
    },
    {
      id: "dm-9",
      question: "What does this code output?",
      code: "d = {'a': 1, 'b': 2}\nprint(d.get('c', 3))",
      options: ["None", "3", "Error", "1"],
      correctOption: 1,
      explanation: "get() returns the default value (3) when the key doesn't exist.",
    },
    {
      id: "dm-10",
      question: "What is the result of this code?",
      code: "d = {1: 'a', 2: 'b'}\nd.clear()\nprint(d)",
      options: ["None", "{}", "{1: 'a', 2: 'b'}", "Error"],
      correctOption: 1,
      explanation: "clear() removes all items from the dictionary.",
    },
    {
      id: "dm-11",
      question: "What does this code print?",
      code: "d = {'x': 10, 'y': 20}\nprint(len(d))",
      options: ["1", "2", "10", "Error"],
      correctOption: 1,
      explanation: "len() returns the number of key-value pairs in the dictionary.",
    },
    {
      id: "dm-12",
      question: "What is the output of this code?",
      code: "d = {'a': 1}\nd.update([('b', 2), ('c', 3)])\nprint(d)",
      options: ["{'a': 1}", "{'b': 2, 'c': 3}", "{'a': 1, 'b': 2, 'c': 3}", "Error"],
      correctOption: 2,
      explanation: "update() can take an iterable of key-value pairs.",
    },
    {
      id: "dm-13",
      question: "What does this code output?",
      code: "d = {'a': 1, 'b': 2}\nprint(d.popitem())",
      options: ["('a', 1)", "('b', 2)", "Random item", "Error"],
      correctOption: 1,
      explanation: "popitem() removes and returns the last inserted key-value pair (Python 3.7+).",
    },
    {
      id: "dm-14",
      question: "What is the result of this code?",
      code: "d = {}.fromkeys(['a', 'b'], 0)\nprint(d)",
      options: ["{}", "{'a': None, 'b': None}", "{'a': 0, 'b': 0}", "Error"],
      correctOption: 2,
      explanation: "fromkeys() creates a new dictionary with keys from an iterable and a default value.",
    },
    {
      id: "dm-15",
      question: "What does this code print?",
      code: "d = {'a': 1, 'b': 2}\nprint('c' not in d)",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "The 'not in' operator checks if a key doesn't exist in the dictionary.",
    },
    {
      id: "dm-16",
      question: "What is the output of this code?",
      code: "d = {'a': 1}\nd.setdefault('a', 2)\nprint(d)",
      options: ["{'a': 1}", "{'a': 2}", "{'a': 1, 'a': 2}", "Error"],
      correctOption: 0,
      explanation: "setdefault() doesn't change the value if the key already exists.",
    },
    {
      id: "dm-17",
      question: "What does this code output?",
      code: "d = {1: 'a', 2: 'b'}\nd[3] = 'c'\nprint(d)",
      options: ["{1: 'a', 2: 'b'}", "{3: 'c'}", "{1: 'a', 2: 'b', 3: 'c'}", "Error"],
      correctOption: 2,
      explanation: "You can add new key-value pairs using square bracket notation.",
    },
    {
      id: "dm-18",
      question: "What is the result of this code?",
      code: "d = {'x': 10, 'y': 20}\ndel d['x']\nprint(d)",
      options: ["{'x': 10}", "{'y': 20}", "{'x': None, 'y': 20}", "Error"],
      correctOption: 1,
      explanation: "del removes the specified key-value pair from the dictionary.",
    },
    {
      id: "dm-19",
      question: "What does this code print?",
      code: "d = {k: k*2 for k in range(3)}\nprint(d)",
      options: ["{0: 0, 1: 1, 2: 2}", "{0: 0, 1: 2, 2: 4}", "[0, 2, 4]", "Error"],
      correctOption: 1,
      explanation: "Dictionary comprehension creates {0:0, 1:2, 2:4}.",
    },
    {
      id: "dm-20",
      question: "What is the output of this code?",
      code: "d1 = {'a': 1}\nd2 = d1.copy()\nd2['b'] = 2\nprint(d1)",
      options: ["{'a': 1}", "{'a': 1, 'b': 2}", "{'b': 2}", "Error"],
      correctOption: 0,
      explanation: "copy() creates a shallow copy - changes to the copy don't affect the original.",
    },
    {
      id: "dm-21",
      question: "What does this code output?",
      code: "d = {'a': 1, 'b': 2}\nprint(list(d))",
      options: ["[1, 2]", "['a', 'b']", "[('a', 1), ('b', 2)]", "Error"],
      correctOption: 1,
      explanation: "Converting a dictionary to a list gives its keys.",
    },
    {
      id: "dm-22",
      question: "What is the result of this code?",
      code: "d = dict(zip(['x', 'y'], [1, 2]))\nprint(d)",
      options: ["{'x': 1, 'y': 2}", "{'x': 'y', 1: 2}", "[('x', 1), ('y', 2)]", "Error"],
      correctOption: 0,
      explanation: "zip() pairs elements from two iterables, which dict() converts to key-value pairs.",
    },
    {
      id: "dm-23",
      question: "What does this code print?",
      code: "d = {'a': 1}\nprint(d.setdefault('b'))",
      options: ["None", "1", "{'a': 1, 'b': None}", "Error"],
      correctOption: 0,
      explanation: "setdefault() with no default value inserts None for missing keys.",
    },
    {
      id: "dm-24",
      question: "What is the output of this code?",
      code: "d = {'a': 1, 'b': 2}\nprint(d.pop('c', 'missing'))",
      options: ["None", "'missing'", "Error", "1"],
      correctOption: 1,
      explanation: "pop() returns the default value when the key doesn't exist.",
    },
    {
      id: "dm-25",
      question: "What does this code output?",
      code: "d = {1: 'a', 2: 'b'}\nprint(1 in d.keys())",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "keys() view supports membership testing.",
    },
    {
      id: "dm-26",
      question: "What is the result of this code?",
      code: "d = {'a': 1, 'b': 2}\nprint(sum(d.values()))",
      options: ["3", "ab", "['a', 'b']", "Error"],
      correctOption: 0,
      explanation: "values() returns [1, 2], and sum() adds them.",
    },
    {
      id: "dm-27",
      question: "What does this code print?",
      code: "d = {}\nd.update(a=1, b=2)\nprint(d)",
      options: ["{}", "{'a': 1, 'b': 2}", "{'a': 'b', 1: 2}", "Error"],
      correctOption: 1,
      explanation: "update() can take keyword arguments as key-value pairs.",
    },
    {
      id: "dm-28",
      question: "What is the output of this code?",
      code: "d = {'x': 1}\nprint(d | {'y': 2})",
      options: ["{'x': 1}", "{'y': 2}", "{'x': 1, 'y': 2}", "Error"],
      correctOption: 2,
      explanation: "The | operator merges dictionaries (Python 3.9+).",
    }
  ],
  "set-methods": [
    {
      id: "set-1",
      question: "What does this code output?",
      code: "s = {1, 2, 3}\ns.add(4)\nprint(s)",
      options: ["{1, 2, 3}", "{1, 2, 3, 4}", "{4}", "Error"],
      correctOption: 1,
      explanation: "add() inserts a single element into the set.",
    },
    {
      id: "set-2",
      question: "What is the result of this code?",
      code: "s1 = {1, 2, 3}\ns2 = {3, 4, 5}\nprint(s1.union(s2))",
      options: ["{1, 2, 3}", "{3, 4, 5}", "{1, 2, 3, 4, 5}", "{3}"],
      correctOption: 2,
      explanation: "union() returns a new set with elements from both sets.",
    },
    {
      id: "set-3",
      question: "What does this code print?",
      code: "s = {1, 2, 3, 4, 5}\ns.discard(3)\nprint(s)",
      options: ["{1, 2, 4, 5}", "{1, 2, 3, 4, 5}", "3", "Error"],
      correctOption: 0,
      explanation: "discard() removes an element if it exists (no error if it doesn't).",
    },
    {
      id: "set-4",
      question: "What is the output of this code?",
      code: "s1 = {1, 2, 3}\ns2 = {2, 3, 4}\nprint(s1.intersection(s2))",
      options: ["{1, 4}", "{2, 3}", "{1, 2, 3, 4}", "set()"],
      correctOption: 1,
      explanation: "intersection() returns elements common to both sets.",
    },
    {
      id: "set-5",
      question: "What does this code print?",
      code: "s = {1, 2, 3}\ns.remove(2)\nprint(s)",
      options: ["{1, 3}", "{1, 2, 3}", "2", "Error if 2 not in set"],
      correctOption: 0,
      explanation: "remove() deletes the element (raises KeyError if element not found).",
    },
    {
      id: "set-6",
      question: "What is the result of this code?",
      code: "s1 = {1, 2, 3}\ns2 = {2, 3, 4}\nprint(s1.difference(s2))",
      options: ["{1}", "{4}", "{1, 4}", "set()"],
      correctOption: 0,
      explanation: "difference() returns elements in s1 that are not in s2.",
    },
    {
      id: "set-7",
      question: "What does this code output?",
      code: "s = set([1, 2, 2, 3, 3, 3])\nprint(s)",
      options: ["[1, 2, 3]", "{1, 2, 2, 3, 3, 3}", "{1, 2, 3}", "Error"],
      correctOption: 2,
      explanation: "Sets automatically remove duplicate values.",
    },
    {
      id: "set-8",
      question: "What is the output of this code?",
      code: "s = {1, 2, 3}\nprint(len(s))",
      options: ["1", "2", "3", "Error"],
      correctOption: 2,
      explanation: "len() returns the number of unique elements in the set.",
    },
    {
      id: "set-9",
      question: "What does this code output?",
      code: "s = {1, 2, 3}\nprint(s.pop())",
      options: ["1", "Random element", "None", "Error if set is empty"],
      correctOption: 1,
      explanation: "pop() removes and returns an arbitrary element from the set.",
    },
    {
      id: "set-10",
      question: "What is the result of this code?",
      code: "s = {1, 2, 3}\ns.update([4, 5])\nprint(s)",
      options: ["{1, 2, 3}", "{4, 5}", "{1, 2, 3, 4, 5}", "Error"],
      correctOption: 2,
      explanation: "update() adds multiple elements from an iterable to the set.",
    },
    {
      id: "set-11",
      question: "What does this code print?",
      code: "s1 = {1, 2, 3}\ns2 = {2, 3}\nprint(s2.issubset(s1))",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "issubset() returns True if all elements of s2 are in s1.",
    },
    {
      id: "set-12",
      question: "What is the output of this code?",
      code: "s = {1, 2, 3}\ns.clear()\nprint(s)",
      options: ["None", "{1, 2, 3}", "set()", "Error"],
      correctOption: 2,
      explanation: "clear() removes all elements from the set, leaving an empty set.",
    },
    {
      id: "set-13",
      question: "What does this code output?",
      code: "s1 = {1, 2, 3}\ns2 = {3, 4, 5}\nprint(s1.symmetric_difference(s2))",
      options: ["{1, 2}", "{4, 5}", "{1, 2, 4, 5}", "{3}"],
      correctOption: 2,
      explanation: "symmetric_difference() returns elements in either set but not both.",
    },
    {
      id: "set-14",
      question: "What is the result of this code?",
      code: "s1 = {1, 2, 3}\ns2 = {4, 5, 6}\nprint(s1.isdisjoint(s2))",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "isdisjoint() returns True if the sets have no common elements.",
    },
    {
      id: "set-15",
      question: "What does this code print?",
      code: "s = {1, 2, 3}\nprint(2 in s)",
      options: ["True", "False", "2", "Error"],
      correctOption: 0,
      explanation: "The 'in' operator checks for membership in the set.",
    },
    {
      id: "set-16",
      question: "What is the output of this code?",
      code: "s1 = {1, 2}\ns2 = {2, 3}\ns1.intersection_update(s2)\nprint(s1)",
      options: ["{1}", "{2}", "{1, 2, 3}", "set()"],
      correctOption: 1,
      explanation: "intersection_update() updates s1 with the intersection of s1 and s2.",
    },
    {
      id: "set-17",
      question: "What does this code output?",
      code: "s = {x for x in range(5) if x % 2 == 0}\nprint(s)",
      options: ["{0, 1, 2, 3, 4}", "{0, 2, 4}", "{1, 3}", "Error"],
      correctOption: 1,
      explanation: "Set comprehension creates a set of even numbers from 0 to 4.",
    },
    {
      id: "set-18",
      question: "What is the result of this code?",
      code: "s1 = {1, 2}\ns2 = {2, 3}\ns1.difference_update(s2)\nprint(s1)",
      options: ["{1}", "{3}", "{1, 3}", "set()"],
      correctOption: 0,
      explanation: "difference_update() removes elements of s2 from s1.",
    },
    {
      id: "set-19",
      question: "What does this code print?",
      code: "s = frozenset([1, 2, 3])\nprint(type(s))",
      options: ["<class 'set'>", "<class 'frozenset'>", "<class 'tuple'>", "Error"],
      correctOption: 1,
      explanation: "frozenset() creates an immutable set object.",
    },
    {
      id: "set-20",
      question: "What is the output of this code?",
      code: "s1 = {1, 2}\ns2 = {2, 3}\ns1.symmetric_difference_update(s2)\nprint(s1)",
      options: ["{1, 3}", "{2}", "{1, 2, 3}", "set()"],
      correctOption: 0,
      explanation: "symmetric_difference_update() updates s1 with elements in either set but not both.",
    },
    {
      id: "set-21",
      question: "What does this code output?",
      code: "s = set('hello')\nprint(s)",
      options: ["{'h', 'e', 'l', 'l', 'o'}", "{'h', 'e', 'l', 'o'}", "{'hello'}", "Error"],
      correctOption: 1,
      explanation: "set() converts the string to a set of unique characters.",
    },
    {
      id: "set-22",
      question: "What is the result of this code?",
      code: "s1 = {1, 2, 3}\ns2 = {3, 4, 5}\nprint(s1 | s2)",
      options: ["{1, 2, 3}", "{3, 4, 5}", "{1, 2, 3, 4, 5}", "{3}"],
      correctOption: 2,
      explanation: "The | operator performs a union of sets.",
    },
    {
      id: "set-23",
      question: "What does this code print?",
      code: "s1 = {1, 2}\ns2 = {2, 3}\nprint(s1 & s2)",
      options: ["{1}", "{2}", "{3}", "set()"],
      correctOption: 1,
      explanation: "The & operator performs an intersection of sets.",
    },
    {
      id: "set-24",
      question: "What is the output of this code?",
      code: "s1 = {1, 2}\ns2 = {2, 3}\nprint(s1 - s2)",
      options: ["{1}", "{3}", "{1, 3}", "set()"],
      correctOption: 0,
      explanation: "The - operator performs a set difference (elements in s1 not in s2).",
    },
    {
      id: "set-25",
      question: "What does this code output?",
      code: "s1 = {1, 2}\ns2 = {2, 3}\nprint(s1 ^ s2)",
      options: ["{1, 3}", "{2}", "{1, 2, 3}", "set()"],
      correctOption: 0,
      explanation: "The ^ operator performs a symmetric difference of sets.",
    },
    {
      id: "set-26",
      question: "What is the result of this code?",
      code: "s = {1, 2, 3}\nprint(s.copy())",
      options: ["{1, 2, 3}", "[1, 2, 3]", "None", "Error"],
      correctOption: 0,
      explanation: "copy() creates a shallow copy of the set.",
    },
    {
      id: "set-27",
      question: "What does this code print?",
      code: "s = set()\nprint(bool(s))",
      options: ["True", "False", "None", "Error"],
      correctOption: 1,
      explanation: "An empty set evaluates to False in a boolean context.",
    },
    {
      id: "set-28",
      question: "What is the output of this code?",
      code: "s1 = {1, 2}\ns2 = {3, 4}\nprint(s1.issuperset(s2))",
      options: ["True", "False", "None", "Error"],
      correctOption: 1,
      explanation: "issuperset() returns False since not all elements of s2 are in s1.",
    }
  ],
  "frozenset-methods": [
    {
      id: "fs-1",
      question: "What does this code output?",
      code: "fs = frozenset([1, 2, 3])\nprint(type(fs))",
      options: ["<class 'set'>", "<class 'frozenset'>", "<class 'tuple'>", "<class 'list'>"],
      correctOption: 1,
      explanation: "frozenset() creates an immutable set object.",
    },
    {
      id: "fs-2",
      question: "What is the result of this code?",
      code: "fs = frozenset('hello')\nprint(fs)",
      options: ["frozenset({'h', 'e', 'l', 'o'})", "frozenset({'hello'})", "'hello'", "Error"],
      correctOption: 0,
      explanation: "frozenset() creates an immutable set from the iterable's elements.",
    },
    {
      id: "fs-3",
      question: "What happens when you run this code?",
      code: "fs = frozenset([1, 2, 3])\nfs.add(4)",
      options: ["fs becomes frozenset({1, 2, 3, 4})", "Nothing", "AttributeError", "TypeError"],
      correctOption: 2,
      explanation: "frozensets are immutable and don't have an add method.",
    },
    {
      id: "fs-4",
      question: "What is the output of this code?",
      code: "fs1 = frozenset([1, 2, 3])\nfs2 = frozenset([3, 4, 5])\nprint(fs1.union(fs2))",
      options: ["frozenset({1, 2, 3})", "frozenset({3, 4, 5})", "frozenset({1, 2, 3, 4, 5})", "Error"],
      correctOption: 2,
      explanation: "union() works with frozensets, returning a new frozenset.",
    },
    {
      id: "fs-5",
      question: "What does this code print?",
      code: "fs = frozenset([1, 2, 3])\nprint(2 in fs)",
      options: ["True", "False", "2", "Error"],
      correctOption: 0,
      explanation: "You can check for membership in a frozenset with the 'in' operator.",
    },
    {
      id: "fs-6",
      question: "What is the result of this code?",
      code: "fs = frozenset({1, 2, 3})\nprint(len(fs))",
      options: ["1", "2", "3", "Error"],
      correctOption: 2,
      explanation: "len() works with frozensets just like with regular sets.",
    },
    {
      id: "fs-7",
      question: "What does this code output?",
      code: "fs = frozenset([1, 2, 2, 3, 3, 3])\nprint(fs)",
      options: ["frozenset({1, 2, 2, 3, 3, 3})", "frozenset({1, 2, 3})", "[1, 2, 3]", "Error"],
      correctOption: 1,
      explanation: "Like sets, frozensets automatically remove duplicate values.",
    },
    {
      id: "fs-8",
      question: "What is the output of this code?",
      code: "fs1 = frozenset([1, 2, 3])\nfs2 = frozenset([3, 4, 5])\nprint(fs1.intersection(fs2))",
      options: ["frozenset({3})", "frozenset({1, 2, 4, 5})", "frozenset({1, 2, 3, 4, 5})", "Error"],
      correctOption: 0,
      explanation: "intersection() returns a new frozenset with common elements.",
    },
    {
      id: "fs-9",
      question: "What does this code output?",
      code: "fs = frozenset([1, 2, 3])\nprint(fs.difference(frozenset([2, 4])))",
      options: ["frozenset({1, 3})", "frozenset({1, 2, 3})", "frozenset({4})", "Error"],
      correctOption: 0,
      explanation: "difference() returns elements in the first frozenset but not in the second."
    },
    {
      id: "fs-10",
      question: "What is the result of this code?",
      code: "fs = frozenset()\nprint(fs)",
      options: ["frozenset([])", "frozenset({})", "frozenset()", "Error"],
      correctOption: 2,
      explanation: "An empty frozenset is displayed as frozenset()."
    },
    {
      id: "fs-11",
      question: "What happens when you run this code?",
      code: "fs = frozenset([1, 2, 3])\nfs.discard(2)",
      options: ["fs becomes frozenset({1, 3})", "Nothing", "AttributeError", "TypeError"],
      correctOption: 2,
      explanation: "frozensets are immutable and don't have discard or remove methods."
    },
    {
      id: "fs-12",
      question: "What is the output of this code?",
      code: "fs1 = frozenset([1, 2, 3])\nfs2 = frozenset([3, 4, 5])\nprint(fs1.symmetric_difference(fs2))",
      options: ["frozenset({1, 2, 4, 5})", "frozenset({3})", "frozenset({1, 2, 3, 4, 5})", "Error"],
      correctOption: 0,
      explanation: "symmetric_difference() returns elements in either set but not both."
    },
    {
      id: "fs-13",
      question: "What does this code print?",
      code: "fs = frozenset([1, 2, 3])\nprint(fs.isdisjoint(frozenset([4, 5])))",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "isdisjoint() returns True when sets have no common elements."
    },
    {
      id: "fs-14",
      question: "What is the result of this code?",
      code: "fs = frozenset([1, 2, 3])\nprint(fs.issubset(frozenset([1, 2, 3, 4])))",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "issubset() returns True when all elements are contained in the other set."
    },
    {
      id: "fs-15",
      question: "What does this code output?",
      code: "fs = frozenset(['apple', 'banana'])\nfor item in fs:\n    print(item)",
      options: ["apple\nbanana", "banana\napple", "Nothing", "Error"],
      correctOption: 1,
      explanation: "frozensets are iterable but unordered, so iteration order isn't guaranteed (though it will show all elements)."
    },
    {
      id: "fs-16",
      question: "What is the output of this code?",
      code: "fs1 = frozenset([1, 2])\nfs2 = frozenset([2, 1])\nprint(fs1 == fs2)",
      options: ["True", "False", "None", "Error"],
      correctOption: 0,
      explanation: "frozensets are equal if they contain the same elements, regardless of order."
    },
    {
      id: "fs-17",
      question: "What happens when you run this code?",
      code: "fs = frozenset([1, 2, 3])\nprint(fs[0])",
      options: ["1", "2", "3", "TypeError"],
      correctOption: 3,
      explanation: "frozensets are unordered collections and don't support indexing."
    }
  ]
};